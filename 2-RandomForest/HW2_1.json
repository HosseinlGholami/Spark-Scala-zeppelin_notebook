{"paragraphs":[{"text":"import org.apache.spark._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD._\n\nimport org.apache.spark.ml.linalg.{Vector, Vectors}\n\ndef time[R](block: => R): R = {\n    val t0 = System.nanoTime()\n    val result = block    // call-by-name\n    val t1 = System.nanoTime()\n    println(\"Elapsed time: \" + (t1 - t0) + \"ns\")\n    result\n}","user":"anonymous","dateUpdated":"2019-11-15T14:12:07+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark._\r\nimport org.apache.spark.SparkConf\r\nimport org.apache.spark.SparkContext._\r\nimport org.apache.spark.rdd.RDD._\r\nimport org.apache.spark.ml.linalg.{Vector, Vectors}\r\ntime: [R](block: => R)R\n"}]},"apps":[],"jobName":"paragraph_1572696184864_-385305465","id":"20191102-153304_1090739411","dateCreated":"2019-11-02T15:33:04+0330","dateStarted":"2019-11-15T14:12:07+0330","dateFinished":"2019-11-15T14:12:07+0330","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5703"},{"text":"def parser(line:String)={\n    val num =line.split(\",\")\n    val label=num(41)\n    val x0=num(0).toDouble\n    val x1=num(1)\n    val x2=num(2)\n    val x3=num(3)\n    val x4=num.dropRight(1).drop(4).map(t=>t.toDouble)\n    (label,x0,x1,x2,x3 ,Vectors.dense(x4))\n}\n\n\nval Data = sc.textFile(\"C:/BigData/HW2/kddcup.txt\").map(parser).toDF(\"label\",\"f0\",\"f1\",\"f2\",\"f3\",\"f4\")\nval Array(trainData,valData) = Data.randomSplit(Array(0.9, 0.1), seed = 123)\nval test = sc.textFile(\"C:/BigData/HW2/kddcup-test.txt\").map(parser).toDF(\"label\",\"f0\",\"f1\",\"f2\",\"f3\",\"f4\")\n\n","user":"anonymous","dateUpdated":"2019-11-15T14:12:12+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"parser: (line: String)(String, Double, String, String, String, org.apache.spark.ml.linalg.Vector)\r\nData: org.apache.spark.sql.DataFrame = [label: string, f0: double ... 4 more fields]\r\ntrainData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [label: string, f0: double ... 4 more fields]\r\nvalData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [label: string, f0: double ... 4 more fields]\r\ntest: org.apache.spark.sql.DataFrame = [label: string, f0: double ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1572696199083_1273013194","id":"20191102-153319_431504429","dateCreated":"2019-11-02T15:33:19+0330","dateStarted":"2019-11-15T14:12:12+0330","dateFinished":"2019-11-15T14:12:16+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5704"},{"text":"//make string categorical thing to vector\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\n\n//prepare label \nval labelIndexer = new StringIndexer()\n   .setInputCol(\"label\")\n   .setOutputCol(\"indexedLabel\")\n\n//prepare f1\nval F1Indexer = new StringIndexer()\n   .setInputCol(\"f1\")\n   .setOutputCol(\"Ft1\")\n\n\n//prepare f2\n val F2Indexer = new StringIndexer()\n  .setInputCol(\"f2\")\n  .setOutputCol(\"Ft2\")\n\n\n//prepare f3\n  val F3Indexer = new StringIndexer()\n  .setInputCol(\"f3\")\n  .setOutputCol(\"Ft3\")\n\n\n\nimport org.apache.spark.ml.feature.VectorAssembler\n\nval assembler = new VectorAssembler()\n   .setInputCols(Array(\"f0\",\"Ft1\",\"Ft2\",\"Ft3\",\"f4\"))\n   .setOutputCol(\"Features\")   \n  \n\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nval rf = new RandomForestClassifier()\n  .setLabelCol(\"indexedLabel\")\n  .setFeaturesCol(\"Features\")\n  .setImpurity(\"entropy\")\n  .setMaxDepth(10)\n  .setNumTrees(10)\n  .setFeatureSubsetStrategy(\"auto\")\n  .setSeed(123)\n  .setMaxBins(70)\n\n  \n\nimport org.apache.spark.ml.Pipeline\n\nval testData = new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer))\n                            .fit(test).transform(test).select(\"f0\",\"Ft1\",\"Ft2\",\"Ft3\",\"f4\",\"indexedLabel\")\n\nval pipeline = new Pipeline()\n  .setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,rf ))","user":"anonymous","dateUpdated":"2019-11-15T14:33:00+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\r\nlabelIndexer: org.apache.spark.ml.feature.StringIndexer = strIdx_1bd5503faad7\r\nF1Indexer: org.apache.spark.ml.feature.StringIndexer = strIdx_30abaef8a5dc\r\nF2Indexer: org.apache.spark.ml.feature.StringIndexer = strIdx_cdeb1b70f029\r\nF3Indexer: org.apache.spark.ml.feature.StringIndexer = strIdx_62f730fabb5d\r\nimport org.apache.spark.ml.feature.VectorAssembler\r\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_15b161299bdb\r\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\r\nrf: org.apache.spark.ml.classification.RandomForestClassifier = rfc_c1632a0d70de\r\nimport org.apache.spark.ml.Pipeline\r\ntestData: org.apache.spark.sql.DataFrame = [f0: doub..."}]},"apps":[],"jobName":"paragraph_1572698564261_-802104290","id":"20191102-161244_578496489","dateCreated":"2019-11-02T16:12:44+0330","dateStarted":"2019-11-15T14:33:01+0330","dateFinished":"2019-11-15T14:33:05+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5705"},{"text":"val model = pipeline.fit(trainData)","user":"anonymous","dateUpdated":"2019-11-15T14:33:06+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model: org.apache.spark.ml.PipelineModel = pipeline_28b05dd83192\n"}]},"apps":[],"jobName":"paragraph_1572875807477_-869687117","id":"20191104-172647_1061263869","dateCreated":"2019-11-04T17:26:47+0330","dateStarted":"2019-11-15T14:33:07+0330","dateFinished":"2019-11-15T14:36:14+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5706"},{"text":"val predictionsV=model.transform(valData)\nval predictionsT=model.transform(testData)\n\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nval evaluator = new MulticlassClassificationEvaluator()\n        .setLabelCol(\"indexedLabel\")\n        .setPredictionCol(\"prediction\")\n        .setMetricName(\"accuracy\")\n    \n println(\"accuracy is on validation is \"+ evaluator.evaluate(predictionsV) )\n\n    \n println(\"accuracy is on test is \"+ evaluator.evaluate(predictionsT) )\n\n","user":"anonymous","dateUpdated":"2019-11-15T14:33:09+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"accuracy is on validation is 0.9995019747517527\r\naccuracy is on test is 0.5277867980156191\r\npredictionsV: org.apache.spark.sql.DataFrame = [label: string, f0: double ... 12 more fields]\r\npredictionsT: org.apache.spark.sql.DataFrame = [f0: double, Ft1: double ... 8 more fields]\r\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\r\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_bf79aec4b0a4\n"}]},"apps":[],"jobName":"paragraph_1572863140556_-301533687","id":"20191104-135540_2015677921","dateCreated":"2019-11-04T13:55:40+0330","dateStarted":"2019-11-15T14:33:10+0330","dateFinished":"2019-11-15T14:37:00+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5707"},{"text":"//part a\n//Tree-10,20,30,40,50 -time -accuracy\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nval seed = 100\nval evaluator = new MulticlassClassificationEvaluator()\n      .setLabelCol(\"indexedLabel\")\n      .setPredictionCol(\"prediction\")\n      .setMetricName(\"accuracy\")\n\nprintln(\"%table\\nx \\ty\")\n(10 to 50 by 10).map(numtree =>(\n                numtree,time{evaluator.evaluate{new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"entropy\")\n                                                                .setMaxDepth(10)\n                                                                .setNumTrees(numtree)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ))\n                                                .fit(trainData)\n                                                .transform(valData)\n\n                   \n                        }\n                    }    \n                )\n          ).foreach{case (x,y) => println(x + \"\\t\" + y)}","user":"anonymous","dateUpdated":"2019-11-15T18:49:28+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":329.972,"optionOpen":false,"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","forceY":false,"isDateFormat":false}},"commonSetting":{},"keys":[{"name":"x ","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"y\r","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"x \ty\r\nElapsed time: 188932606800ns\r\nElapsed time: 288499708100ns\r\nElapsed time: 412046940100ns\r\nElapsed time: 519397275800ns\r\nElapsed time: 698110586100ns\r\n10\t0.9995734127996571\r\n20\t0.999789768030453\r\n30\t0.9996407686733955\r\n40\t0.9998122199883658\r\n50\t0.9997040423729678\r\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\r\nseed: Int = 100\r\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_680b795a5a09\n"}]},"apps":[],"jobName":"paragraph_1573820180013_449739988","id":"20191115-154620_740198764","dateCreated":"2019-11-15T15:46:20+0330","dateStarted":"2019-11-15T15:47:39+0330","dateFinished":"2019-11-15T16:22:56+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5708"},{"text":"//part a\n//Tree-10,20,30,40,50 -time -accuracy in testdata\n\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nval seed = 100\nval evaluator = new MulticlassClassificationEvaluator()\n      .setLabelCol(\"indexedLabel\")\n      .setPredictionCol(\"prediction\")\n      .setMetricName(\"accuracy\")\n\nprintln(\"%table\\nx \\ty\")\n(10 to 50 by 10).map(numtree =>(\n                numtree,time{evaluator.evaluate{new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"entropy\")\n                                                                .setMaxDepth(10)\n                                                                .setNumTrees(numtree)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ))\n                                                .fit(trainData)\n                                                .transform(testData)\n\n                   \n                        }\n                    }    \n                )\n          ).foreach{case (x,y) => println(x + \"\\t\" + y)}","user":"anonymous","dateUpdated":"2019-11-15T17:55:33+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"x ":"string","y\r":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"x ","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"y\r","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"x \ty\r\nElapsed time: 251781098600ns\r\nElapsed time: 283303074100ns\r\nElapsed time: 355545961000ns\r\nElapsed time: 496468348000ns\r\nElapsed time: 769343439400ns\r\n10\t0.5278864671783017\r\n20\t0.5275971050930942\r\n30\t0.527664622912976\r\n40\t0.5276196110330548\r\n50\t0.5276324715701751\r\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\r\nseed: Int = 100\r\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_a476d60e90ec\n"}]},"apps":[],"jobName":"paragraph_1572929340090_97241187","id":"20191105-081900_1704507660","dateCreated":"2019-11-05T08:19:00+0330","dateStarted":"2019-11-11T19:44:38+0330","dateFinished":"2019-11-11T20:20:42+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5709"},{"text":"//gini in validation\nprintln(\n        evaluator.evaluate{new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"gini\")\n                                                                .setMaxDepth(20)\n                                                                .setNumTrees(10)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ))\n                                                .fit(trainData)\n                                                .transform(valData)}\n                                                \n        )","user":"anonymous","dateUpdated":"2019-11-15T18:03:06+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0.9999142743425148\r\n"}]},"apps":[],"jobName":"paragraph_1573820318393_1611924905","id":"20191115-154838_1794966134","dateCreated":"2019-11-15T15:48:38+0330","dateStarted":"2019-11-15T18:03:07+0330","dateFinished":"2019-11-15T18:08:18+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5710"},{"text":"//gini in test\nprintln(\n        evaluator.evaluate{new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"gini\")\n                                                                .setMaxDepth(20)\n                                                                .setNumTrees(10)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ))\n                                                .fit(trainData)\n                                                .transform(testData)}\n                                                \n        )","user":"anonymous","dateUpdated":"2019-11-15T18:09:18+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0.5294715283783827\r\n"}]},"apps":[],"jobName":"paragraph_1573493411386_-450009149","id":"20191111-210011_1081249333","dateCreated":"2019-11-11T21:00:11+0330","dateStarted":"2019-11-15T18:09:22+0330","dateFinished":"2019-11-15T18:14:06+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5711"},{"text":"//entropy in val \nprintln(\n        evaluator.evaluate{new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"entropy\")\n                                                                .setMaxDepth(20)\n                                                                .setNumTrees(10)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ))\n                                                .fit(trainData)\n                                                .transform(valData)}\n                                                \n        )","user":"anonymous","dateUpdated":"2019-11-15T18:16:40+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0.9999224386908467\r\n"}]},"apps":[],"jobName":"paragraph_1573820385130_1040175842","id":"20191115-154945_600563992","dateCreated":"2019-11-15T15:49:45+0330","dateStarted":"2019-11-15T18:16:40+0330","dateFinished":"2019-11-15T18:21:34+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5712"},{"text":"//entropy in test\nprintln(\n        evaluator.evaluate{new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"entropy\")\n                                                                .setMaxDepth(20)\n                                                                .setNumTrees(10)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ))\n                                                .fit(trainData)\n                                                .transform(testData)}\n                                                \n        )","user":"anonymous","dateUpdated":"2019-11-15T18:21:52+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0.5277675072099386\r\n"}]},"apps":[],"jobName":"paragraph_1573493499782_-1977209189","id":"20191111-210139_905379309","dateCreated":"2019-11-11T21:01:39+0330","dateStarted":"2019-11-15T18:21:54+0330","dateFinished":"2019-11-15T18:26:37+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5713"},{"text":"val Model=new Pipeline().setStages(Array(labelIndexer, F1Indexer, F2Indexer, F3Indexer, assembler ,\n                                                    new RandomForestClassifier()\n                                                                .setLabelCol(\"indexedLabel\")\n                                                                .setFeaturesCol(\"Features\")\n                                                                .setImpurity(\"gini\")\n                                                                .setMaxDepth(20)\n                                                                .setNumTrees(10)\n                                                                .setFeatureSubsetStrategy(\"auto\")\n                                                                .setSeed(123)\n                                                                .setMaxBins(100)\n                                                    ) )\n                                                .fit(trainData)\n                                                .transform(testData)\n                                                \nval p1 =evaluator.setMetricName(\"f1\").evaluate(Model)\nval p2 =evaluator.setMetricName(\"weightedPrecision\").evaluate(Model)\nval p3 =evaluator.setMetricName(\"weightedRecall\").evaluate(Model)\nval p4 =evaluator.setMetricName(\"accuracy\").evaluate(Model)\n\nprintln(\"f1 is\"+p1+\"weightedPrecision is\"+p2+\"weightedRecall is\"+p3+\"accuracy is\"+p4)\n","user":"anonymous","dateUpdated":"2019-11-15T18:41:39+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"f1 is0.5302292139352637weightedPrecision is0.5329607544319456weightedRecall is0.5294715283783827accuracy is0.5294715283783827\r\nModel: org.apache.spark.sql.DataFrame = [f0: double, Ft1: double ... 8 more fields]\r\np1: Double = 0.5302292139352637\r\np2: Double = 0.5329607544319456\r\np3: Double = 0.5294715283783827\r\np4: Double = 0.5294715283783827\n"}]},"apps":[],"jobName":"paragraph_1573496212666_-1691776819","id":"20191111-214652_1031500765","dateCreated":"2019-11-11T21:46:52+0330","dateStarted":"2019-11-15T18:41:40+0330","dateFinished":"2019-11-15T18:46:15+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5714"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573829976159_-637528280","id":"20191115-182936_1751256325","dateCreated":"2019-11-15T18:29:36+0330","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5715"}],"name":"HW2/2-1-1","id":"2EUFUYJ74","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}