{"paragraphs":[{"text":"import org.apache.spark._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD._\nimport org.apache.spark.rdd.RDD\n","user":"anonymous","dateUpdated":"2019-12-20T19:32:50+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark._\r\nimport org.apache.spark.SparkConf\r\nimport org.apache.spark.SparkContext._\r\nimport org.apache.spark.rdd.RDD._\r\nimport org.apache.spark.rdd.RDD\n"}]},"apps":[],"jobName":"paragraph_1576515019499_1984339382","id":"20191216-202019_1682421998","dateCreated":"2019-12-16T20:20:19+0330","dateStarted":"2019-12-20T14:16:57+0330","dateFinished":"2019-12-20T14:17:18+0330","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:23183"},{"text":"//parsing Data\n\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\n\nval schema = StructType(\n    StructField(\"flightNum\", IntegerType, nullable = true) ::\n    StructField(\"tailNum\", StringType, nullable = true) ::\n    StructField(\"origin\", StringType, nullable = true) ::\n    StructField(\"dest\", StringType, nullable = true) ::\n    StructField(\"distance\", IntegerType, nullable = true) ::\n    StructField(\"canceled\", IntegerType, nullable = true) ::\n    StructField(\"cancellationCode\", IntegerType, nullable = true) ::\n    StructField(\"carrierDelay\", IntegerType, nullable = true) ::\n    StructField(\"weatherDelay\", IntegerType, nullable = true) ::\n    StructField(\"nasDelay\", IntegerType, nullable = true) ::\n    StructField(\"securityDelay\", IntegerType, nullable = true) ::\n    StructField(\"lateAircraftDelay\", IntegerType, nullable = true) ::\n    Nil\n)\n\nval creditDf = spark.read.format(\"csv\")\n  .option(\"header\", value = true)\n  .option(\"delimiter\", \",\")\n  .option(\"mode\", \"DROPMALFORMED\")\n  .schema(schema)\n  .load(\"C:/Users/hosse/Desktop/HW3/flight-m.csv\")\n  \n  creditDf.show(2)","user":"anonymous","dateUpdated":"2019-12-20T14:17:18+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-------+------+----+--------+--------+----------------+------------+------------+--------+-------------+-----------------+\n|flightNum|tailNum|origin|dest|distance|canceled|cancellationCode|carrierDelay|weatherDelay|nasDelay|securityDelay|lateAircraftDelay|\n+---------+-------+------+----+--------+--------+----------------+------------+------------+--------+-------------+-----------------+\n|      135| N615AS|   PDX| ANC|    1542|       0|            null|         947|           0|       1|            0|                0|\n|      135| N615AS|   PDX| ANC|    1542|       0|            null|         810|           0|       1|            0|                0|\n+---------+-------+------+----+--------+--------+----------------+------------+------------+--------+-------------+-----------------+\nonly showing top 2 rows\n\r\nimport org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.functions._\r\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(flightNum,IntegerType,true), StructField(tailNum,StringType,true), StructField(origin,StringType,true), StructField(dest,StringType,true), StructField(distance,IntegerType,true), StructField(canceled,IntegerType,true), StructField(cancellationCode,IntegerType,true), StructField(carrierDelay,IntegerType,true), StructField(weatherDelay,IntegerType,true), StructField(nasDelay,IntegerType,true), StructField(securityDelay,IntegerType,true), StructField(lateAircraftDelay,IntegerType,true))\r\ncreditDf: org.apache.spark.sql.DataFrame = [flightNum: int, tailNum: string ... 10 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576515032260_214092683","id":"20191216-202032_688253691","dateCreated":"2019-12-16T20:20:32+0330","dateStarted":"2019-12-20T14:17:19+0330","dateFinished":"2019-12-20T14:17:23+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23184"},{"text":"//definition of graph\r\nimport org.apache.spark.graphx._\r\n\r\n// create vertices RDD with ID and Name\r\nval vertices=\r\ncreditDf.select(\r\n    explode(array(\"origin\",\"dest\")))\r\n    .distinct.rdd.collect\r\n    .map(t=>t(0)).zipWithIndex.map(_.swap)\r\n    .map(t=> (t._1.toLong,t._2.toString))\r\n\r\nval vRDD= sc.parallelize(vertices)\r\n\r\n\r\n// Now let's define a vertex dataframe because joins are clearer in sparkSQL\r\nval vertexDf = vertices.toList.toDF(\"id\", \"node\")\r\n\r\n\r\n// Defining a default vertex called nowhere\r\nval nowhere = \"nowhere\"\r\n\r\n//// Defining edges\r\nval edges=\r\ncreditDf\r\n    .join(vertexDf, creditDf(\"origin\") === vertexDf(\"node\"))\r\n    .select('origin,'id as 'orgin_, 'dest,'distance )\r\n    .join(vertexDf, creditDf(\"dest\") === vertexDf(\"node\"))\r\n    .select('orgin_,'id as 'dest_,'distance)\r\n    .distinct\r\n    .rdd.map(row =>  \r\n            Edge( row.getAs[Long](\"orgin_\"), row.getAs[Long](\"dest_\") , row.getAs[Int](\"distance\")      )\r\n                )\r\n    .collect\r\n                \r\nval eRDD= sc.parallelize(edges)\r\n\r\n// define the graph\r\nval graph = Graph(vRDD,eRDD, nowhere)\r\n\r\nval vertixMAP= vertices.toMap\r\nval vertixMAP_inverse=vertices.map(_.swap).toMap\r\n","user":"anonymous","dateUpdated":"2019-12-20T14:17:23+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.graphx._\r\nvertices: Array[(Long, String)] = Array((0,DLG), (1,GEG), (2,SNA), (3,BUR), (4,PSG), (5,OAK), (6,SCC), (7,DCA), (8,WRG), (9,KTN), (10,CDV), (11,ADK), (12,LIH), (13,HNL), (14,GST), (15,SJC), (16,LGB), (17,RNO), (18,BOS), (19,EWR), (20,LAS), (21,FAI), (22,DEN), (23,OME), (24,PSP), (25,BOI), (26,SEA), (27,PDX), (28,MIA), (29,SMF), (30,BRW), (31,PHX), (32,BET), (33,DFW), (34,SFO), (35,AKN), (36,ORD), (37,TUS), (38,JNU), (39,KOA), (40,ADQ), (41,ONT), (42,LAX), (43,MSP), (44,SIT), (45,MCO), (46,OTZ), (47,SAN), (48,YAK), (49,ANC), (50,OGG))\r\nvRDD: org.apache.spark.rdd.RDD[(Long, String)] = ParallelCollectionRDD[13] at parallelize at <console>:55\r\nvertexDf: org.apache.spark.sql.DataFrame = [id: bigint, node: string]\r\nnowhere: String = nowhere\r\nedges: Array[org...."}]},"apps":[],"jobName":"paragraph_1576590573119_-973343593","id":"20191217-171933_1374478512","dateCreated":"2019-12-17T17:19:33+0330","dateStarted":"2019-12-20T14:17:23+0330","dateFinished":"2019-12-20T14:17:33+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23185"},{"text":"//parta-a\n//number of airport:\nval number_of_airport=graph.numVertices\nvertexDf.show(100)","user":"anonymous","dateUpdated":"2019-12-20T14:17:33+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----+\n| id|node|\n+---+----+\n|  0| DLG|\n|  1| GEG|\n|  2| SNA|\n|  3| BUR|\n|  4| PSG|\n|  5| OAK|\n|  6| SCC|\n|  7| DCA|\n|  8| WRG|\n|  9| KTN|\n| 10| CDV|\n| 11| ADK|\n| 12| LIH|\n| 13| HNL|\n| 14| GST|\n| 15| SJC|\n| 16| LGB|\n| 17| RNO|\n| 18| BOS|\n| 19| EWR|\n| 20| LAS|\n| 21| FAI|\n| 22| DEN|\n| 23| OME|\n| 24| PSP|\n| 25| BOI|\n| 26| SEA|\n| 27| PDX|\n| 28| MIA|\n| 29| SMF|\n| 30| BRW|\n| 31| PHX|\n| 32| BET|\n| 33| DFW|\n| 34| SFO|\n| 35| AKN|\n| 36| ORD|\n| 37| TUS|\n| 38| JNU|\n| 39| KOA|\n| 40| ADQ|\n| 41| ONT|\n| 42| LAX|\n| 43| MSP|\n| 44| SIT|\n| 45| MCO|\n| 46| OTZ|\n| 47| SAN|\n| 48| YAK|\n| 49| ANC|\n| 50| OGG|\n+---+----+\n\r\nnumber_of_airport: Long = 51\n"}]},"apps":[],"jobName":"paragraph_1576611461067_1281964539","id":"20191217-230741_468135957","dateCreated":"2019-12-17T23:07:41+0330","dateStarted":"2019-12-20T14:17:33+0330","dateFinished":"2019-12-20T14:17:35+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23186"},{"text":"//parta-b\ncreditDf\n    .join(vertexDf, creditDf(\"origin\") === vertexDf(\"node\"))\n    .select('origin,'id as 'orgin_, 'dest,'distance )\n    .join(vertexDf, creditDf(\"dest\") === vertexDf(\"node\"))\n    .select('orgin_,'id as 'dest_,'distance)\n    .distinct\n    .show(180)\nval number_of_routes=graph.numEdges","user":"anonymous","dateUpdated":"2019-12-20T14:17:35+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-----+--------+\n|orgin_|dest_|distance|\n+------+-----+--------+\n|    10|   49|     160|\n|    26|   13|    2677|\n|    44|   38|      95|\n|    22|   49|    2406|\n|    49|   26|    1449|\n|    27|   45|    2534|\n|    27|   31|    1009|\n|    49|    6|     626|\n|     0|   49|     329|\n|    26|   22|    1024|\n|    42|   27|     834|\n|    26|   34|     679|\n|    29|   27|     479|\n|     9|   38|     234|\n|    31|   27|    1009|\n|    26|   50|    2640|\n|    38|   14|      41|\n|    26|   19|    2401|\n|    26|   45|    2553|\n|    26|    3|     937|\n|    21|    6|     373|\n|    32|   49|     399|\n|    34|   27|     550|\n|    40|   49|     252|\n|    16|   26|     965|\n|    26|    2|     978|\n|    48|   10|     213|\n|    26|   12|    2701|\n|    26|   47|    1050|\n|    26|   41|     956|\n|    38|   26|     909|\n|    18|   27|    2537|\n|    49|   13|    2777|\n|    20|   26|     866|\n|    49|   36|    2846|\n|    47|   26|    1050|\n|    24|   34|     421|\n|    45|   27|    2534|\n|    22|   27|     992|\n|    38|   49|     571|\n|    46|   23|     183|\n|    26|   33|    1660|\n|    19|   26|    2401|\n|    26|   20|     866|\n|    27|   42|     834|\n|    13|   26|    2677|\n|    27|   47|     933|\n|    34|   24|     421|\n|    27|   22|     992|\n|    24|   26|     987|\n|    49|   46|     549|\n|     5|   27|     543|\n|    39|   26|    2688|\n|    26|   44|     862|\n|    30|   21|     503|\n|    27|   20|     762|\n|    45|   26|    2553|\n|    38|   44|      95|\n|    27|    3|     817|\n|    49|   35|     289|\n|    34|   42|     337|\n|    26|    9|     680|\n|    26|   39|    2688|\n|    24|   27|     873|\n|    26|   21|    1533|\n|    18|   26|    2496|\n|    29|   26|     605|\n|    36|   49|    2846|\n|    49|   11|    1192|\n|    26|   25|     399|\n|    44|    9|     183|\n|    17|   26|     564|\n|     6|   49|     626|\n|    43|   26|    1399|\n|    26|   31|    1107|\n|    21|   49|     261|\n|    36|   26|    1721|\n|    26|   15|     697|\n|    49|   40|     252|\n|     4|    8|      31|\n|    27|   34|     550|\n|    49|   32|     399|\n|    38|    9|     234|\n|     1|   26|     224|\n|    27|   24|     873|\n|     9|    8|      82|\n|    26|   43|    1399|\n|    26|   42|     954|\n|     2|   26|     978|\n|    10|   48|     213|\n|    49|   10|     160|\n|    49|   22|    2406|\n|    26|   18|    2496|\n|    34|   49|    2018|\n|    27|    2|     859|\n|    27|   15|     569|\n|    42|    7|    2311|\n|     6|   30|     204|\n|    49|    0|     329|\n|    21|   30|     503|\n|    42|   26|     954|\n|     3|   26|     937|\n|    41|   27|     838|\n|    26|   29|     605|\n|    49|   21|     261|\n|     8|    4|      31|\n|    42|   34|     337|\n|     4|   38|     123|\n|     3|   27|     817|\n|    26|   24|     987|\n|    23|   49|     539|\n|    31|   26|    1107|\n|     2|    5|     371|\n|    48|   38|     199|\n|    49|   38|     571|\n|     8|    9|      82|\n|    23|   46|     183|\n|     5|    2|     371|\n|     5|   26|     671|\n|    37|   26|    1216|\n|    47|   27|     933|\n|    49|   50|    2797|\n|    42|   49|    2345|\n|    26|   36|    1721|\n|    25|   26|     399|\n|    26|   38|     909|\n|    12|   26|    2701|\n|    35|    0|      71|\n|     7|   26|    2329|\n|    38|   48|     199|\n|    26|   28|    2724|\n|     9|   44|     183|\n|    26|   49|    1449|\n|     7|   42|    2311|\n|    26|   17|     564|\n|    34|   26|     679|\n|    27|    5|     543|\n|    11|   49|    1192|\n|    35|   49|     289|\n|    49|   23|     539|\n|    13|   49|    2777|\n|    27|   29|     479|\n|    28|   26|    2724|\n|    27|   41|     838|\n|    20|   27|     762|\n|    46|   49|     549|\n|    49|   34|    2018|\n|     9|   26|     680|\n|    26|   37|    1216|\n|    15|   27|     569|\n|    22|   26|    1024|\n|    15|   26|     697|\n|    50|   49|    2797|\n|    33|   26|    1660|\n|    30|   49|     725|\n|    21|   26|    1533|\n|    49|   27|    1542|\n|    14|   38|      41|\n|    27|   18|    2537|\n|    26|    5|     671|\n|    26|    7|    2329|\n|    38|    4|     123|\n|    44|   26|     862|\n|    26|   16|     965|\n|    49|   42|    2345|\n|    27|   49|    1542|\n|    50|   26|    2640|\n|     2|   27|     859|\n|    26|    1|     224|\n|    41|   26|     956|\n+------+-----+--------+\n\r\nnumber_of_routes: Long = 170\n"}]},"apps":[],"jobName":"paragraph_1576611815288_868628583","id":"20191217-231335_1904927738","dateCreated":"2019-12-17T23:13:35+0330","dateStarted":"2019-12-20T14:17:35+0330","dateFinished":"2019-12-20T14:17:37+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23187"},{"text":"//part b\nval longest_distance=graph.edges.filter(x=>x.attr>1000).collect.toList.toDF(\"orgin_\",\"dest_\",\"distance\").sort(desc(\"distance\"))\nval number_oflongest_distance=longest_distance.count\nlongest_distance.show(10)","user":"anonymous","dateUpdated":"2019-12-20T14:17:37+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-----+--------+\n|orgin_|dest_|distance|\n+------+-----+--------+\n|    36|   49|    2846|\n|    49|   36|    2846|\n|    49|   50|    2797|\n|    50|   49|    2797|\n|    49|   13|    2777|\n|    13|   49|    2777|\n|    28|   26|    2724|\n|    26|   28|    2724|\n|    26|   12|    2701|\n|    12|   26|    2701|\n+------+-----+--------+\nonly showing top 10 rows\n\r\nlongest_distance: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [orgin_: bigint, dest_: bigint ... 1 more field]\r\nnumber_oflongest_distance: Long = 60\n"}]},"apps":[],"jobName":"paragraph_1576611955355_-1426015642","id":"20191217-231555_572223120","dateCreated":"2019-12-17T23:15:55+0330","dateStarted":"2019-12-20T14:17:38+0330","dateFinished":"2019-12-20T14:17:40+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23188"},{"text":"//part b //second view\r\n// print out longest routes\r\ngraph.triplets.sortBy(_.attr, ascending=false).map(triplet =>\r\n     \"Distance \" + triplet.attr.toString + \" from \" + triplet.srcAttr + \" to \" + triplet.dstAttr + \".\").take(10).foreach(println)  ","user":"anonymous","dateUpdated":"2019-12-20T14:17:40+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Distance 2846 from ANC to ORD.\r\nDistance 2846 from ORD to ANC.\r\nDistance 2797 from ANC to OGG.\r\nDistance 2797 from OGG to ANC.\r\nDistance 2777 from ANC to HNL.\r\nDistance 2777 from HNL to ANC.\r\nDistance 2724 from SEA to MIA.\r\nDistance 2724 from MIA to SEA.\r\nDistance 2701 from SEA to LIH.\r\nDistance 2701 from LIH to SEA.\r\n"}]},"apps":[],"jobName":"paragraph_1576614612109_-1279801872","id":"20191218-000012_580219629","dateCreated":"2019-12-18T00:00:12+0330","dateStarted":"2019-12-20T14:17:40+0330","dateFinished":"2019-12-20T14:17:41+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23189"},{"text":"//part c/output order\nval output_ord=graph.triplets.map(t => (t.srcAttr,1)).reduceByKey((x,y)=>x+y).collect.toList.toDF(\"output_node\",\"output_ord\").sort(desc(\"output_ord\"))\n\noutput_ord.show(8)\n","user":"anonymous","dateUpdated":"2019-12-20T14:17:41+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+----------+\n|output_node|output_ord|\n+-----------+----------+\n|        SEA|        35|\n|        ANC|        19|\n|        PDX|        16|\n|        JNU|         7|\n|        SFO|         5|\n|        LAX|         5|\n|        FAI|         4|\n|        KTN|         4|\n+-----------+----------+\nonly showing top 8 rows\n\r\noutput_ord: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [output_node: string, output_ord: int]\n"}]},"apps":[],"jobName":"paragraph_1576614905922_-1397040104","id":"20191218-000505_12224057","dateCreated":"2019-12-18T00:05:05+0330","dateStarted":"2019-12-20T14:17:41+0330","dateFinished":"2019-12-20T14:17:43+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23190"},{"text":"//part c/input order\nval input_ord=graph.triplets.map(t => (t.dstAttr,1)).reduceByKey((x,y)=>x+y).collect.toList.toDF(\"input_node\",\"input_ord\").sort(desc(\"input_ord\"))\n\ninput_ord.show(8)\n","user":"anonymous","dateUpdated":"2019-12-20T14:17:43+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------+\n|input_node|input_ord|\n+----------+---------+\n|       SEA|       35|\n|       ANC|       20|\n|       PDX|       16|\n|       JNU|        7|\n|       SFO|        5|\n|       LAX|        5|\n|       KTN|        4|\n|       SIT|        3|\n+----------+---------+\nonly showing top 8 rows\n\r\ninput_ord: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [input_node: string, input_ord: int]\n"}]},"apps":[],"jobName":"paragraph_1576616264763_1810070972","id":"20191218-002744_1554629416","dateCreated":"2019-12-18T00:27:44+0330","dateStarted":"2019-12-20T14:17:43+0330","dateFinished":"2019-12-20T14:17:44+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23191"},{"text":"//part c in different way\n\n// Define a reduce operation to compute the highest degree vertex\ndef max(a: (VertexId, Int), b: (VertexId, Int)): (VertexId, Int) = {\n if (a._2 > b._2) a else b\n}\n\nval maxInDegree: (VertexId, Int) = graph.inDegrees.reduce(max)\n\nval maxOutDegree: (VertexId, Int) = graph.outDegrees.reduce(max)\n\nval maxDegrees: (VertexId, Int) = graph.degrees.reduce(max)\n\nprintln(\"maxInDegree :\" +  vertixMAP(maxInDegree._1 ) +\",\" + maxInDegree._2)\nprintln(\"maxOutDegree :\"+  vertixMAP(maxOutDegree._1) +\",\" + maxOutDegree._2)\nprintln(\"maxDegrees :\"  +  vertixMAP(maxDegrees._1  ) +\",\" + maxDegrees._2)\n","user":"anonymous","dateUpdated":"2019-12-20T14:17:44+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"maxInDegree :SEA,35\r\nmaxOutDegree :SEA,35\r\nmaxDegrees :SEA,70\r\nmax: (a: (org.apache.spark.graphx.VertexId, Int), b: (org.apache.spark.graphx.VertexId, Int))(org.apache.spark.graphx.VertexId, Int)\r\nmaxInDegree: (org.apache.spark.graphx.VertexId, Int) = (26,35)\r\nmaxOutDegree: (org.apache.spark.graphx.VertexId, Int) = (26,35)\r\nmaxDegrees: (org.apache.spark.graphx.VertexId, Int) = (26,70)\n"}]},"apps":[],"jobName":"paragraph_1576621092263_1008461385","id":"20191218-014812_2032353197","dateCreated":"2019-12-18T01:48:12+0330","dateStarted":"2019-12-20T14:17:44+0330","dateFinished":"2019-12-20T14:17:46+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23192"},{"text":"maxDegrees._1","user":"anonymous","dateUpdated":"2019-12-20T14:17:46+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res8: org.apache.spark.graphx.VertexId = 26\n"}]},"apps":[],"jobName":"paragraph_1576622386080_686200963","id":"20191218-020946_1050325762","dateCreated":"2019-12-18T02:09:46+0330","dateStarted":"2019-12-20T14:17:46+0330","dateFinished":"2019-12-20T14:17:46+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23193"},{"text":"//part D who is HUB\n//combine the previous section\nval Data = input_ord.join(output_ord,output_ord(\"output_node\")===input_ord(\"input_node\")).select('input_node as 'node ,'input_ord,'output_ord)\n\n//Hubbibility = hub ability :))))\n\nval Hub = Data.withColumn(\"Hubbility\",expr(\"(output_ord/input_ord)*output_ord\")).sort(desc(\"Hubbility\"))\n\nHub.show(15)","user":"anonymous","dateUpdated":"2019-12-20T14:17:46+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+---------+----------+-----------------+\n|node|input_ord|output_ord|        Hubbility|\n+----+---------+----------+-----------------+\n| SEA|       35|        35|             35.0|\n| ANC|       20|        19|            18.05|\n| PDX|       16|        16|             16.0|\n| JNU|        7|         7|              7.0|\n| FAI|        3|         4|5.333333333333333|\n| LAX|        5|         5|              5.0|\n| SFO|        5|         5|              5.0|\n| AKN|        1|         2|              4.0|\n| KTN|        4|         4|              4.0|\n| PSP|        3|         3|              3.0|\n| SNA|        3|         3|              3.0|\n| OAK|        3|         3|              3.0|\n| SIT|        3|         3|              3.0|\n| DEN|        3|         3|              3.0|\n| ORD|        2|         2|              2.0|\n+----+---------+----------+-----------------+\nonly showing top 15 rows\n\r\nData: org.apache.spark.sql.DataFrame = [node: string, input_ord: int ... 1 more field]\r\nHub: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [node: string, input_ord: int ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576616745973_-392870811","id":"20191218-003545_775556171","dateCreated":"2019-12-18T00:35:45+0330","dateStarted":"2019-12-20T14:17:46+0330","dateFinished":"2019-12-20T14:17:48+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23194"},{"text":"//part e\n// use pageRank\nval ranks = graph.pageRank(0.1).vertices.collect.toList.toDF(\"node_rank\",\"rank\")\nval most_importants_node= ranks.join(vertexDf,ranks(\"node_rank\")===vertexDf(\"id\") ).select(\"id\",\"node\",\"rank\").sort(desc(\"rank\")).show(10)","user":"anonymous","dateUpdated":"2019-12-20T14:17:48+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----+------------------+\n| id|node|              rank|\n+---+----+------------------+\n| 26| SEA| 8.468267369903197|\n| 49| ANC|  4.31196907462454|\n| 27| PDX| 3.712331111811354|\n| 38| JNU|  1.67211788195928|\n| 34| SFO|1.2428303380539998|\n| 42| LAX|1.1890815347701815|\n|  9| KTN|1.0428605559869997|\n| 22| DEN|  0.91843139007883|\n| 44| SIT|0.9021335562634846|\n|  5| OAK|0.8944569042430728|\n+---+----+------------------+\nonly showing top 10 rows\n\r\nranks: org.apache.spark.sql.DataFrame = [node_rank: bigint, rank: double]\r\nmost_importants_node: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1576617856826_-278805398","id":"20191218-005416_468763599","dateCreated":"2019-12-18T00:54:16+0330","dateStarted":"2019-12-20T14:17:48+0330","dateFinished":"2019-12-20T14:17:52+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23195"},{"text":"//part f -creat edge\nval new_edges=\ncreditDf\n    .filter(creditDf.col(\"carrierDelay\").isNotNull)\n    .filter(creditDf.col(\"weatherDelay\").isNotNull)\n    .filter(creditDf.col(\"nasDelay\").isNotNull)\n    .filter(creditDf.col(\"securityDelay\").isNotNull)\n    .filter(creditDf.col(\"lateAircraftDelay\").isNotNull)\n    .join(vertexDf, creditDf(\"origin\") === vertexDf(\"node\"))\n    .select('origin,'id as 'orgin_, 'dest,'carrierDelay,'weatherDelay,'nasDelay,'securityDelay,'lateAircraftDelay )\n    .join(vertexDf, creditDf(\"dest\") === vertexDf(\"node\"))\n    .select('orgin_,'id as 'dest_,'carrierDelay,'weatherDelay,'nasDelay,'securityDelay,'lateAircraftDelay )\n    .rdd.map(row =>  \n                Edge(row.getAs[Long](\"orgin_\") , row.getAs[Long](\"dest_\") , row.getAs[Int](\"carrierDelay\")+\n                                                                        row.getAs[Int](\"weatherDelay\")+      \n                                                                        row.getAs[Int](\"nasDelay\")+      \n                                                                        row.getAs[Int](\"securityDelay\")+\n                                                                        row.getAs[Int](\"lateAircraftDelay\")\n                                                                       )\n            )\n    \n    .collect.toList.toDF(\"src\",\"dis\",\"delay\")\n\nnew_edges.show(3)\n","user":"anonymous","dateUpdated":"2019-12-20T14:17:52+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+-----+\n|src|dis|delay|\n+---+---+-----+\n| 27| 49|  948|\n| 27| 49|  811|\n| 27| 49|  672|\n+---+---+-----+\nonly showing top 3 rows\n\r\nnew_edges: org.apache.spark.sql.DataFrame = [src: bigint, dis: bigint ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1576623567359_-657941364","id":"20191218-022927_1145711571","dateCreated":"2019-12-18T02:29:27+0330","dateStarted":"2019-12-20T14:17:52+0330","dateFinished":"2019-12-20T14:17:54+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23196"},{"text":"//part f -answering the question\nval most_delay_des = new_edges.filter(new_edges.col(\"src\").isin(vertixMAP_inverse(\"DCA\"))).sort(desc(\"delay\")).show(5)","user":"anonymous","dateUpdated":"2019-12-20T14:17:54+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+-----+\n|src|dis|delay|\n+---+---+-----+\n|  7| 42|  253|\n|  7| 42|  199|\n|  7| 26|  197|\n|  7| 26|  183|\n|  7| 26|  181|\n+---+---+-----+\nonly showing top 5 rows\n\r\nmost_delay_des: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1576625402524_2010019202","id":"20191218-030002_688028676","dateCreated":"2019-12-18T03:00:02+0330","dateStarted":"2019-12-20T14:17:54+0330","dateFinished":"2019-12-20T14:17:54+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23197"},{"text":"//part g found maximom of branch distant \r\n//1\r\nimport org.apache.spark.graphx.lib.ShortestPaths\r\n\r\nval Start_node=\"LAS\"\r\nval End_node=\"DCA\"\r\n\r\nval branch_distant=ShortestPaths.run(graph, Seq(vertixMAP_inverse(End_node)))\r\n                        .vertices    \r\n                        .filter({\r\n                                 case(vId, _) =>\r\n                                 vId == vertixMAP_inverse(Start_node) \r\n                                 })\r\n                        .first._2(vertixMAP_inverse(End_node))","user":"anonymous","dateUpdated":"2019-12-20T19:26:40+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.graphx.lib.ShortestPaths\r\nStart_node: String = LAS\r\nEnd_node: String = DCA\r\nbranch_distant: Int = 2\n"}]},"apps":[],"jobName":"paragraph_1576628443872_-408167504","id":"20191218-035043_103622168","dateCreated":"2019-12-18T03:50:43+0330","dateStarted":"2019-12-20T19:26:25+0330","dateFinished":"2019-12-20T19:26:27+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23198"},{"text":"//resource:\r\n//https://www.youtube.com/watch?v=SYQAOK6JaLE\r\nval initialMsg = (Double.PositiveInfinity)//,List(\"dummy\"))\r\n\r\nval initialGraph = graph.mapVertices((id, _) =>\r\n    if (id == vertixMAP_inverse(Start_node) ) 0.0 else Double.PositiveInfinity)\r\n\r\nval sssp = initialGraph.pregel(\r\n            initialMsg,\r\n            6,\r\n            EdgeDirection.Out)((id, dist, newDist) => \r\n                                    \r\n                                    math.min(dist, newDist), // Vertex Program\r\n                                    \r\n                                    triplet => {  // Send Message\r\n                                                if ( triplet.srcAttr + triplet.attr < triplet.dstAttr) {\r\n                                                    Iterator((triplet.dstId, triplet.srcAttr + triplet.attr))\r\n                                                    }\r\n                                                else{\r\n                                                    Iterator.empty\r\n                                                    }\r\n                                                },\r\n                                    (a, b) => math.min(a, b) // Merge Message\r\n                                                )\r\n                                                \r\n                                                \r\n//sssp.vertices.collect.foreach(println)\r\nsssp.vertices.filter({\r\n                     case(vId, _) =>\r\n                     vId == vertixMAP_inverse(End_node) \r\n                     })\r\n            .collect\r\n","user":"anonymous","dateUpdated":"2019-12-20T19:17:37+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"initialMsg: Double = Infinity\r\ninitialGraph: org.apache.spark.graphx.Graph[Double,Int] = org.apache.spark.graphx.impl.GraphImpl@208a5b36\r\nsssp: org.apache.spark.graphx.Graph[Double,Int] = org.apache.spark.graphx.impl.GraphImpl@39736bb8\r\nres95: Array[(org.apache.spark.graphx.VertexId, Double)] = Array((7,3195.0))\n"}]},"apps":[],"jobName":"paragraph_1576795501416_-1648908287","id":"20191220-021501_1817561441","dateCreated":"2019-12-20T02:15:01+0330","dateStarted":"2019-12-20T19:17:37+0330","dateFinished":"2019-12-20T19:17:39+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23199"},{"text":"val a=initialGraph.triplets.collect","user":"anonymous","dateUpdated":"2019-12-20T19:10:30+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"a: Array[org.apache.spark.graphx.EdgeTriplet[Double,Int]] = Array(((0,Infinity),(49,Infinity),329), ((9,Infinity),(38,Infinity),234), ((10,Infinity),(49,Infinity),160), ((21,Infinity),(6,Infinity),373), ((22,Infinity),(49,Infinity),2406), ((26,Infinity),(3,Infinity),937), ((26,Infinity),(13,Infinity),2677), ((26,Infinity),(19,Infinity),2401), ((26,Infinity),(22,Infinity),1024), ((26,Infinity),(34,Infinity),679), ((26,Infinity),(45,Infinity),2553), ((26,Infinity),(50,Infinity),2640), ((27,Infinity),(31,Infinity),1009), ((27,Infinity),(45,Infinity),2534), ((29,Infinity),(27,Infinity),479), ((31,Infinity),(27,Infinity),1009), ((38,Infinity),(14,Infinity),41), ((42,Infinity),(27,Infinity),834), ((44,Infinity),(38,Infinity),95), ((49,Infinity),(6,Infinity),626), ((49,Infinity),(26,Infinity),..."}]},"apps":[],"jobName":"paragraph_1576846708653_-141765263","id":"20191220-162828_2089697817","dateCreated":"2019-12-20T16:28:28+0330","dateStarted":"2019-12-20T19:10:30+0330","dateFinished":"2019-12-20T19:10:31+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23200"},{"text":"a(20).dstAttr+2==a(20).dstAttr","user":"anonymous","dateUpdated":"2019-12-20T19:12:13+0330","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res83: Boolean = true\n"}]},"apps":[],"jobName":"paragraph_1576856361881_-1151395991","id":"20191220-190921_617369927","dateCreated":"2019-12-20T19:09:21+0330","dateStarted":"2019-12-20T19:12:13+0330","dateFinished":"2019-12-20T19:12:13+0330","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23201"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576856398653_-610833169","id":"20191220-190958_1814972302","dateCreated":"2019-12-20T19:09:58+0330","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:23202"}],"name":"HW3/3","id":"2EX8TH698","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}